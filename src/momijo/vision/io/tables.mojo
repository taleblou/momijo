# MIT License
# SPDX-License-Identifier: MIT
# Project: momijo
# File: src/momijo/vision/io/tables.mojo
# Description: Standard JPEG Huffman and Quantization tables (baseline).
# Notes:
# - Returns heap-allocated pointers (UnsafePointer[UInt8]); caller is responsible for freeing.
# - Provides both luminance (luma) and chrominance (chroma) Huffman tables (DC/AC),
#   plus default quantization tables for luma/chroma (quality ~50 IJG-style).

# ----------------------------- helpers -----------------------------

@always_inline
fn _alloc_copy(vals: List[UInt8]) -> UnsafePointer[UInt8]:
    var n = len(vals)
    var p = UnsafePointer[UInt8].alloc(n)
    var i = 0
    while i < n:
        p[i] = vals[i]
        i += 1
    return p

# --------------------- Huffman: DC (lengths + symbols) ---------------------

# ITU T.81 Annex K: DC luminance code lengths (counts for code lengths 1..16)
fn std_dc_lengths_luma() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([0,1,5,1,1,1,1,1,1,1,0,0,0,0,0,0])
    return _alloc_copy(vals)

# DC luminance symbols (12 values)
fn std_dc_symbols_luma() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([0,1,2,3,4,5,6,7,8,9,10,11])
    return _alloc_copy(vals)

# DC chrominance code lengths (identical to luminance in Annex K)
fn std_dc_lengths_chroma() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([0,1,5,1,1,1,1,1,1,1,0,0,0,0,0,0])
    return _alloc_copy(vals)

# DC chrominance symbols (also 0..11 per Annex K)
fn std_dc_symbols_chroma() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([0,1,2,3,4,5,6,7,8,9,10,11])
    return _alloc_copy(vals)

# ---------------------- Huffman: AC (lengths + symbols) --------------------

# ITU T.81 Annex K: AC luminance code lengths (counts for code lengths 1..16)
fn std_ac_lengths_luma() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125])
    return _alloc_copy(vals)

# AC luminance symbols (162 values; canonical IJG table K.5)
fn std_ac_symbols_luma() -> UnsafePointer[UInt8]:
    var v = List[UInt8]()
    v.extend([
        0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
        0x22,0x71,0x14,0x32,0x81,0x91,0xA1,0x08,0x23,0x42,0xB1,0xC1,0x15,0x52,0xD1,0xF0,
        0x24,0x33,0x62,0x72,0x82,0x09,0x0A,0x16,0x17,0x18,0x19,0x1A,0x25,0x26,0x27,0x28,
        0x29,0x2A,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
        0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
        0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
        0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,
        0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,
        0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xE2,0xE3,
        0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA
    ])
    return _alloc_copy(v)

# AC chrominance code lengths (same counts as luminance in Annex K)
fn std_ac_lengths_chroma() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119])  # Annex K.6
    return _alloc_copy(vals)

# AC chrominance symbols (canonical IJG table K.6; 162 values)
fn std_ac_symbols_chroma() -> UnsafePointer[UInt8]:
    var v = List[UInt8]()
    v.extend([
        0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
        0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,0xA1,0xB1,0xC1,0x09,0x23,0x33,0x52,0xF0,
        0x15,0x62,0x72,0xD1,0x0A,0x16,0x24,0x34,0xE1,0x25,0xF1,0x17,0x18,0x19,0x1A,0x26,
        0x27,0x28,0x29,0x2A,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,
        0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,
        0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x82,0x83,0x84,0x85,0x86,0x87,
        0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,
        0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,
        0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,
        0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,
        0xF9,0xFA
    ])
    return _alloc_copy(v)

# -------------------------- Quantization tables ---------------------------

# Standard Luma quantization (quality ~50)
fn std_luma_qt() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([
        16,11,10,16,24,40,51,61,
        12,12,14,19,26,58,60,55,
        14,13,16,24,40,57,69,56,
        14,17,22,29,51,87,80,62,
        18,22,37,56,68,109,103,77,
        24,35,55,64,81,104,113,92,
        49,64,78,87,103,121,120,101,
        72,92,95,98,112,100,103,99
    ])
    return _alloc_copy(vals)

# Standard Chroma quantization (quality ~50, IJG-like)
fn std_chroma_qt() -> UnsafePointer[UInt8]:
    var vals = List[UInt8]()
    vals.extend([
        17,18,18,24,21,24,47,26,
        26,47,99,66,56,66,99,99,
        99,99,99,99,99,99,99,99,
        99,99,99,99,99,99,99,99,
        99,99,99,99,99,99,99,99,
        99,99,99,99,99,99,99,99,
        99,99,99,99,99,99,99,99,
        99,99,99,99,99,99,99,99
    ])
    return _alloc_copy(vals)

# ---------------------- Optional generic aliases (compat) ------------------

# Some callsites may import generic names; keep thin wrappers for compatibility.

fn std_dc_lengths() -> UnsafePointer[UInt8]:
    return std_dc_lengths_luma()

fn std_dc_symbols() -> UnsafePointer[UInt8]:
    return std_dc_symbols_luma()

fn std_ac_lengths() -> UnsafePointer[UInt8]:
    return std_ac_lengths_luma()

fn std_ac_symbols() -> UnsafePointer[UInt8]:
    return std_ac_symbols_luma()
