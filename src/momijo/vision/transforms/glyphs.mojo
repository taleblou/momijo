# MIT License
# SPDX-License-Identifier: MIT
# Project: momijo.vision
# File: src/momijo/vision/transforms/glyphs.mojo
# Description: 5x7 bitmap font (row-major) without custom structs; bit0=leftmost.
# Unknown characters map to '?'.

from collections.list import List

@always_inline
fn _pack5_lsb_left(row: StringSlice) -> UInt8:
    # Convert a 5-char pattern to a 5-bit row: row[0] -> bit0 (left), row[4] -> bit4 (right).
    var v = 0
    var x = 0
    while x < 5:
        var c = row[x]
        if c == "#":
            v = v | (1 << x)
        x += 1
    return UInt8(v & 31)

@always_inline
fn _rows(r0: StringSlice, r1: StringSlice, r2: StringSlice, r3: StringSlice,
         r4: StringSlice, r5: StringSlice, r6: StringSlice) -> List[UInt8]:
    var out = List[UInt8]()
    out.append(_pack5_lsb_left(r0))
    out.append(_pack5_lsb_left(r1))
    out.append(_pack5_lsb_left(r2))
    out.append(_pack5_lsb_left(r3))
    out.append(_pack5_lsb_left(r4))
    out.append(_pack5_lsb_left(r5))
    out.append(_pack5_lsb_left(r6))
    return out.copy()

@always_inline
fn _fallback_q() -> List[UInt8]:
    # '?' glyph
    return _rows(".###.", "#...#", "....#", "...#.", "..#..", ".....", "..#..")

# Public API expected by put_text()
@always_inline
fn _glyph5x7_rowmajor(ch: StringSlice) -> List[UInt8]:
    # Space
    if ch == " ":
        return _rows(".....",".....",".....",".....",".....",".....",".....")

    # Punctuation (subset commonly used in UI)
    if ch == "!": return _rows(".#...", ".#...", ".#...", ".#...", ".#...", ".....", ".#...")
    if ch == "\"": return _rows(".#.#.", ".#.#.", ".#.#.", ".....", ".....", ".....", ".....")
    if ch == "#": return _rows(".#.#.", "#####", ".#.#.", ".#.#.", "#####", ".#.#.", ".....")
    if ch == "$": return _rows("..#..", ".####", "#.#..", ".###.", "..#.#", "####.", "..#..")
    if ch == "%": return _rows("#...#", "...#.", "..#..", ".#...", "#...#", ".....", ".....")
    if ch == "&": return _rows(".##..", "#..#.", ".##..", "#.#..", "#..#.", ".###.", ".....")
    if ch == "'": return _rows(".#...", ".#...", ".....", ".....", ".....", ".....", ".....")
    if ch == "(": return _rows("..#..", ".#...", "#....", "#....", ".#...", "..#..", ".....")
    if ch == ")": return _rows("..#..", "...#.", "....#", "....#", "...#.", "..#..", ".....")
    if ch == "*": return _rows(".....", ".#.#.", "..#..", "#####", "..#..", ".#.#.", ".....")
    if ch == "+": return _rows(".....", "..#..", "..#..", "#####", "..#..", "..#..", ".....")
    if ch == ",": return _rows(".....", ".....", ".....", ".....", ".....", ".#...", "#....")
    if ch == "-": return _rows(".....", ".....", ".....", "#####", ".....", ".....", ".....")
    if ch == ".": return _rows(".....", ".....", ".....", ".....", ".....", ".....", ".#...")
    if ch == "/": return _rows("....#", "...#.", "..#..", ".#...", "#....", ".....", ".....")
    if ch == ":": return _rows(".....", ".#...", ".....", ".....", ".....", ".#...", ".....")
    if ch == ";": return _rows(".....", ".#...", ".....", ".....", ".....", ".#...", "#....")
    if ch == "<": return _rows("....#", "...#.", "..#..", ".#...", "..#..", "...#.", "....#")
    if ch == "=": return _rows(".....", "#####", ".....", "#####", ".....", ".....", ".....")
    if ch == ">": return _rows("#....", ".#...", "..#..", "...#.", "..#..", ".#...", "#....")
    if ch == "?": return _fallback_q()
    if ch == "@": return _rows(".###.", "#...#", "#.##.", "#.#.#", "#.###", "#....", ".###.")
    if ch == "[": return _rows("###..", "#....", "#....", "#....", "#....", "###..", ".....")
    if ch == "]": return _rows("..###", "....#", "....#", "....#", "....#", "..###", ".....")
    if ch == "^": return _rows("..#..", ".#.#.", "#...#", ".....", ".....", ".....", ".....")
    if ch == "_": return _rows(".....", ".....", ".....", ".....", ".....", ".....", "#####")
    if ch == "\\": return _rows("#....", ".#...", "..#..", "...#.", "....#", ".....", ".....")
    if ch == "{": return _rows("..##.", ".#...", ".#...", "#....", ".#...", ".#...", "..##.")
    if ch == "}": return _rows(".##..", "...#.", "...#.", "....#", "...#.", "...#.", ".##..")

    # Digits 0-9
    if ch == "0": return _rows(".###.", "#..##", "#.#.#", "##..#", "#...#", "#...#", ".###.")
    if ch == "1": return _rows("..#..", ".##..", "..#..", "..#..", "..#..", "..#..", ".###.")
    if ch == "2": return _rows(".###.", "#...#", "....#", "...#.", "..#..", ".#...", "#####")
    if ch == "3": return _rows("####.", "....#", "...#.", "..##.", "....#", "#...#", ".###.")
    if ch == "4": return _rows("...#.", "..##.", ".#.#.", "#..#.", "#####", "...#.", "...#.")
    if ch == "5": return _rows("#####", "#....", "####.", "....#", "....#", "#...#", ".###.")
    if ch == "6": return _rows("..##.", ".#...", "#....", "####.", "#...#", "#...#", ".###.")
    if ch == "7": return _rows("#####", "....#", "...#.", "..#..", ".#...", ".#...", ".#...")
    if ch == "8": return _rows(".###.", "#...#", "#...#", ".###.", "#...#", "#...#", ".###.")
    if ch == "9": return _rows(".###.", "#...#", "#...#", ".####", "....#", "...#.", ".##..")

    # Uppercase A-Z
    if ch == "A": return _rows(".###.", "#...#", "#...#", "#####", "#...#", "#...#", "#...#")
    if ch == "B": return _rows("####.", "#...#", "#...#", "####.", "#...#", "#...#", "####.")
    if ch == "C": return _rows(".###.", "#...#", "#....", "#....", "#....", "#...#", ".###.")
    if ch == "D": return _rows("####.", "#...#", "#...#", "#...#", "#...#", "#...#", "####.")
    if ch == "E": return _rows("#####", "#....", "#....", "####.", "#....", "#....", "#####")
    if ch == "F": return _rows("#####", "#....", "#....", "####.", "#....", "#....", "#....")
    if ch == "G": return _rows(".###.", "#...#", "#....", "#.###", "#...#", "#...#", ".###.")
    if ch == "H": return _rows("#...#", "#...#", "#...#", "#####", "#...#", "#...#", "#...#")
    if ch == "I": return _rows(".###.", "..#..", "..#..", "..#..", "..#..", "..#..", ".###.")
    if ch == "J": return _rows("..###", "...#.", "...#.", "...#.", "...#.", "#..#.", ".##..")
    if ch == "K": return _rows("#...#", "#..#.", "#.#..", "##...", "#.#..", "#..#.", "#...#")
    if ch == "L": return _rows("#....", "#....", "#....", "#....", "#....", "#....", "#####")
    if ch == "M": return _rows("#...#", "##.##", "#.#.#", "#.#.#", "#...#", "#...#", "#...#")
    if ch == "N": return _rows("#...#", "##..#", "#.#.#", "#..##", "#...#", "#...#", "#...#")
    if ch == "O": return _rows(".###.", "#...#", "#...#", "#...#", "#...#", "#...#", ".###.")
    if ch == "P": return _rows("####.", "#...#", "#...#", "####.", "#....", "#....", "#....")
    if ch == "Q": return _rows(".###.", "#...#", "#...#", "#...#", "#.#.#", "#..#.", ".##.#")
    if ch == "R": return _rows("####.", "#...#", "#...#", "####.", "#.#..", "#..#.", "#...#")
    if ch == "S": return _rows(".####", "#....", "#....", ".###.", "....#", "....#", "####.")
    if ch == "T": return _rows("#####", "..#..", "..#..", "..#..", "..#..", "..#..", "..#..")
    if ch == "U": return _rows("#...#", "#...#", "#...#", "#...#", "#...#", "#...#", ".###.")
    if ch == "V": return _rows("#...#", "#...#", "#...#", "#...#", "#...#", ".#.#.", "..#..")
    if ch == "W": return _rows("#...#", "#...#", "#...#", "#.#.#", "#.#.#", "##.##", "#...#")
    if ch == "X": return _rows("#...#", "#...#", ".#.#.", "..#..", ".#.#.", "#...#", "#...#")
    if ch == "Y": return _rows("#...#", "#...#", ".#.#.", "..#..", "..#..", "..#..", "..#..")
    if ch == "Z": return _rows("#####", "....#", "...#.", "..#..", ".#...", "#....", "#####")

    # Lowercase a-z
    if ch == "a": return _rows(".....", ".....", ".###.", "....#", ".####", "#...#", ".####")
    if ch == "b": return _rows("#....", "#....", "####.", "#...#", "#...#", "#...#", "####.")
    if ch == "c": return _rows(".....", ".....", ".###.", "#....", "#....", "#...#", ".###.")
    if ch == "d": return _rows("....#", "....#", ".####", "#...#", "#...#", "#...#", ".####")
    if ch == "e": return _rows(".....", ".....", ".###.", "#...#", "#####", "#....", ".###.")
    if ch == "f": return _rows("..##.", ".#...", ".#...", "###..", ".#...", ".#...", ".#...")
    if ch == "g": return _rows(".....", ".####", "#...#", "#...#", ".####", "....#", ".###.")
    if ch == "h": return _rows("#....", "#....", "####.", "#...#", "#...#", "#...#", "#...#")
    if ch == "i": return _rows(".....", "..#..", ".....", "..##.", "..#..", "..#..", ".###.")
    if ch == "j": return _rows(".....", "...#.", ".....", "...#.", "...#.", "#..#.", ".##..")
    if ch == "k": return _rows("#....", "#..#.", "#.#..", "##...", "#.#..", "#..#.", "#...#")
    if ch == "l": return _rows(".##..", "..#..", "..#..", "..#..", "..#..", "..#..", ".###.")
    if ch == "m": return _rows(".....", ".....", "##.##", "#.#.#", "#.#.#", "#...#", "#...#")
    if ch == "n": return _rows(".....", ".....", "####.", "#...#", "#...#", "#...#", "#...#")
    if ch == "o": return _rows(".....", ".....", ".###.", "#...#", "#...#", "#...#", ".###.")
    if ch == "p": return _rows(".....", "####.", "#...#", "#...#", "####.", "#....", "#....")
    if ch == "q": return _rows(".....", ".####", "#...#", "#...#", ".####", "....#", "....#")
    if ch == "r": return _rows(".....", ".....", "#.##.", "##..#", "#....", "#....", "#....")
    if ch == "s": return _rows(".....", ".....", ".####", "#....", ".###.", "....#", "####.")
    if ch == "t": return _rows(".#...", ".#...", "####.", ".#...", ".#...", ".#...", "..##.")
    if ch == "u": return _rows(".....", ".....", "#...#", "#...#", "#...#", "#..##", ".##.#")
    if ch == "v": return _rows(".....", ".....", "#...#", "#...#", "#...#", ".#.#.", "..#..")
    if ch == "w": return _rows(".....", ".....", "#...#", "#.#.#", "#.#.#", "##.##", "#...#")
    if ch == "x": return _rows(".....", ".....", "#...#", ".#.#.", "..#..", ".#.#.", "#...#")
    if ch == "y": return _rows(".....", ".....", "#...#", "#...#", ".####", "....#", ".###.")
    if ch == "z": return _rows(".....", ".....", "#####", "...#.", "..#..", ".#...", "#####")

    # Fallback
    return _fallback_q()
